<QueryDefinition>
  <Query>
    if not exists (select * from sys.types where name = 'HessHospNullType')
    create type HessHospNullType as table (fieldname varchar(50) NOT NULL, isnullable bit not null)

    if not exists (select * from sys.types where name = 'HessHospLookupTableType')
    create type HessHospLookupTableType as table (id varchar(50) NOT NULL, fieldname varchar(50) NOT NULL, fieldquery varchar(250) NOT NULL, observation_source_value varchar(50) NOT NULL, fieldid int null)
    go;

    declare @hessNull HessHospNullType

    insert into @hessNull
    select 'delmeth',1 union select 'delonset',1 union select 'delinten',1 union select 'delchang',1
    union  select 'delpren',1 union select 'delposn',1 union select 'anagest',1 union select 'matage',1
    union select 'neodur',1 union select 'antedur',1 union select 'postdur',1 union select 'intdays',1
    union select 'acpspef',1 union select 'elecdate',1 union select 'elecdur',1

    declare @lookup HessHospLookupTableType;

    INSERT INTO @lookup
    select a.id, a.fieldname, 'isnull(cast(' + a.id + ' as nvarchar(50)), ''9999999'') ' + a.id, '2-'+cast(row_number() OVER(Order By a.fieldname) as varchar(256)) as observation_source_value, b.fieldid
    from
    (
    select 'admimeth' id ,'admimeth' fieldname union
    select 'admisorc' id ,'admisorc' fieldname union
    select 'disdest' id ,'disdest' fieldname union
    select 'dismeth' id ,'dismeth' fieldname union
    select 'duration' id ,'duration' fieldname union
    select 'elecdate' id ,'elecdate' fieldname union
    select 'elecdur' id ,'elecdur' fieldname
    ) as a
    left join hes_fielddefinitions b on a.fieldname = b.fieldname and b.class in ('Admissions', 'Discharges')


    declare @cols nvarchar(max);
    declare @cols1 nvarchar(max);
    declare @query nvarchar(max);

    select @cols = coalesce(@cols+N',', N'') + fieldquery, @cols1 = coalesce(@cols1+N',', N'') + Id from @lookup

    set @query = N'
    with mappings as
    (
    SELECT distinct FieldId, Value, Description
    FROM hes_fieldmappings
    ),
    a as
    (
    select patid, spno, l.observation_source_value,
    case when l.id in (''disdest'', ''dismeth'') then discharged
    else admidate end as observation_date,
    case when description is null then case when ISNUMERIC(var_code) = 1 then var_code else null end
    else null end as value_as_number,
    case when description is not null then description
    when description is null and var_code is not null then var_code
    else null end as value_as_string
    from
    (
    select patid, spno, admidate, discharged, ' + @cols + '
    from hes_hospital
    JOIN _chunks ch ON ch.ChunkId = {0} AND patid = ch.PERSON_ID
    where admidate is not null
    ) p
    UNPIVOT
    (var_code for field in ('+@cols1+')) as up
    join @tblLookup l on l.id = field
    left join @tblLookupNull n on l.fieldname = n.fieldname
    left join mappings m on l.fieldid = m.fieldid and ((var_code = ''9999999'' and m.value = ''null'') or (var_code = m.value))
    where var_code != '''' and (var_code != ''9999999'' or (isnullable = 1 and var_code = ''9999999''))
    )


    select *, case when value_as_number is not null then 900000006
    else 900000007 end as observation_type_concept_id
    from a
    where observation_date is not null
    '
    exec sp_executesql  @query, N'@tblLookup HessHospLookupTableType readonly, @tblLookupNull HessHospNullType readonly', @lookup, @hessNull
  </Query>
  <Observation>
    <ObservationDefinition>
      <PersonId>patid</PersonId>
      <StartDate>observation_date</StartDate>
      <VisitOccurrenceId>spno</VisitOccurrenceId>
      <ValuesAsString>
        <string>value_as_string</string>
      </ValuesAsString>
      <ValuesAsNumber>
        <string>value_as_number</string>
      </ValuesAsNumber>
      <Concepts>
        <Concept>
          <ConceptIdMappers>
            <Mapper>
              <Lookup>CPRD\Lookups\HES_Observation.sql</Lookup>
            </Mapper>
          </ConceptIdMappers>
          <Fields>
            <Field key="observation_source_value" typeId="observation_type_concept_id"/>
          </Fields>
        </Concept>
      </Concepts>
    </ObservationDefinition>
  </Observation>
</QueryDefinition>