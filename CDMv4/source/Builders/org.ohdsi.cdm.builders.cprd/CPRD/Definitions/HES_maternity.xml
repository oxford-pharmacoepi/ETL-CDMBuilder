<QueryDefinition>
   <Query>

     if not exists (select * from sys.types where name = 'HessMaternityNullType')
     create type HessMaternityNullType as table (fieldname varchar(50) NOT NULL, isnullable bit not null)

     if not exists (select * from sys.types where name = 'HessMaternityLookupTableType')
     create type HessMaternityLookupTableType as table (id varchar(50) NOT NULL, fieldname varchar(50) NOT NULL, fieldquery varchar(250) NOT NULL, observation_source_value varchar(50) NOT NULL, fieldid int not null)
     go;

     declare @hessNull HessMaternityNullType

     insert into @hessNull
     select 'delmeth',1 union select 'delonset',1 union select 'delinten',1 union select 'delchang',1
     union  select 'delpren',1 union select 'delposn',1 union select 'anagest',1 union select 'matage',1
     union select 'neodur',1 union select 'antedur',1 union select 'postdur',1 union select 'intdays',1
     union select 'acpspef',1 union select 'elecdate',1 union select 'elecdur',1

     declare @lookup HessMaternityLookupTableType;

     INSERT INTO @lookup
     select a.id, a.fieldname, 'isnull(cast(' + a.id + ' as nvarchar(50)), ''9999999'') ' + a.id, '3-'+cast(row_number() OVER(Order By a.fieldname) as varchar(256)) as observation_source_value, b.fieldid
     from
     (
     select 'numbaby' id ,'numbaby' fieldname union
     select 'anagest' id ,'anagest' fieldname union
     select 'anasdate' id ,'anasdate' fieldname union
     select 'antedur' id ,'antedur' fieldname union
     select 'biresus' id ,'biresus' fieldname union
     select 'birordr' id ,'birorder' fieldname union
     select 'birstat' id ,'birstat' fieldname union
     select 'birweit' id ,'birweit' fieldname union
     select 'delchang' id ,'delchang' fieldname union
     select 'delinten' id ,'delinten' fieldname union
     select 'delmeth' id ,'delmeth' fieldname union
     select 'delonset' id ,'delonset' fieldname union
     select 'delplac' id ,'delplace' fieldname union
     select 'delposan' id ,'delposn' fieldname union
     select 'delprean' id ,'delpren' fieldname union
     select 'delstat' id ,'delstat' fieldname union
     select 'gestat' id ,'gestat' fieldname union
     select 'matage' id ,'matage' fieldname union
     select 'matordr' id ,'babyseq' fieldname union
     select 'neocare' id ,'neocare' fieldname union
     select 'neodur' id ,'neodur' fieldname union
     select 'numbaby' id ,'numbaby' fieldname union
     select 'numpreg' id ,'numpreg' fieldname union
     select 'postdur' id ,'postdur' fieldname union
     select 'sexbaby' id ,'sexbaby' fieldname union
     select 'wellbaby' id ,'well_baby_ind' fieldname
     ) as a
     left join hes_fielddefinitions b on a.fieldname = b.fieldname and b.class = 'maternity';

     declare @cols nvarchar(max);
     declare @cols1 nvarchar(max);
     declare @query nvarchar(max);

     select @cols = coalesce(@cols+N',', N'') + fieldquery, @cols1 = coalesce(@cols1+N',', N'') + Id from @lookup

     set @query = N'
     with mappings as
     (
     SELECT distinct FieldId, Value, Description
     FROM hes_fieldmappings
     ),
     a as
     (
     select patid, spno, epistart, l.observation_source_value,
     case when description is null then case when ISNUMERIC(var_code) = 1 then var_code else null end
     else null end as value_as_number,
     case when description is not null then description
     when description is null and var_code is not null then var_code
     else null end as value_as_string
     from
     (
     select patid, spno, epistart, ' + @cols + '
     from HES_maternity
     JOIN _chunks ch ON ch.ChunkId = {0} AND patid = ch.PERSON_ID
     where epistart is not null and
     ((numbaby=''1'' and matordr=1)
     or (numbaby=''2'' and matordr&lt;=2)
     or (numbaby=''3'' and matordr&lt;=3)
     or (numbaby=''4'' and matordr&lt;=4)
     or (numbaby=''5'' and matordr&lt;=5)
     or (numbaby=''6'' and matordr&lt;=6)
     or (numbaby=''7'' and matordr&lt;=7)
     or (numbaby=''8'' and matordr&lt;=8)
     or ((numbaby=''9'' or numbaby=''X'') and matordr=1))
     ) p
     UNPIVOT
     (var_code for field in ('+@cols1+')) as up
     join @tblLookup l on l.id = field
     left join @tblLookupNull n on l.fieldname = n.fieldname
     left join mappings m on l.fieldid = m.fieldid and ((var_code = ''9999999'' and m.value = ''null'') or (var_code = m.value))
     where var_code != '''' and (var_code != ''9999999'' or (isnullable = 1 and var_code = ''9999999''))
     )


     select *, case when value_as_number is not null then 900000006
     else 900000007 end as observation_type_concept_id
     from a
     '

     exec sp_executesql  @query, N'@tblLookup HessMaternityLookupTableType readonly, @tblLookupNull HessMaternityNullType readonly', @lookup, @hessNull
   </Query>
  <Observation>
    <ObservationDefinition>
      <PersonId>patid</PersonId>
      <StartDate>epistart</StartDate>
      <VisitOccurrenceId>spno</VisitOccurrenceId>
      <ValuesAsString>
        <string>value_as_string</string>
      </ValuesAsString>
      <ValuesAsNumber>
        <string>value_as_number</string>
      </ValuesAsNumber>
      <Concepts>
        <Concept>
          <ConceptIdMappers>
            <Mapper>
              <Lookup>CPRD\Lookups\HES_Observation.sql</Lookup>
            </Mapper>
          </ConceptIdMappers>
          <Fields>
            <Field key="observation_source_value" typeId="observation_type_concept_id"/>
          </Fields>
        </Concept>
      </Concepts>
    </ObservationDefinition>
  </Observation>
</QueryDefinition>