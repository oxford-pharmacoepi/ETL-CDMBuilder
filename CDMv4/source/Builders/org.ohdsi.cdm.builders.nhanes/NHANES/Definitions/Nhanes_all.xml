<QueryDefinition>
   <Query>
     declare @composite table (name sysname, col sysname);

     -- some tables have composite primary key
     insert @composite values
     ('DR1IFF_F', 'DR1ILINE')
     ,('DR2IFF_F', 'DR2ILINE')
     ,('DXX',      '_MULT_' )
     ,('DXX_B',    '_MULT_' )
     ,('DXX_B_S',  '_MULT_' )
     ,('DXX_C',    '_MULT_' )
     ,('DXX_C_S',  '_MULT_' )
     ,('DXX_D',    '_MULT_' )
     ,('DXX_D_S',  '_MULT_' )
     ,('DXX_S',    '_MULT_' )
     ,('PAQIAF',   'PADLEVEL')
     ,('PAQIAF_B', 'PADLEVEL')
     ,('PAQIAF_C', 'PADLEVEL')
     ,('PAQIAF_D', 'PADLEVEL')
     ,('RXQ_ANA',  'RXQ310' )
     ,('RXQANA_B', 'RXD310' )
     ,('RXQANA_C', 'RXD310' )

     declare @tables TABLE(name varchar(max) NOT NULL, processed bit);

     INSERT INTO @tables
     SELECT distinct t.name, 0
     FROM sys.tables AS t
     INNER JOIN sys.columns c ON t.OBJECT_ID = c.OBJECT_ID
     WHERE c.name = 'SEQN' and t.name != 'NHANES_ALL' and t.name != 'codebook'

     while (Select Count(*) From @tables Where processed = 0) > 0
     begin
     declare @currentTable varchar(max);
     select Top 1 @currentTable = name From @tables Where processed = 0;

     declare @cols nvarchar(max)
     declare @cols1 nvarchar(max)
     SET @cols = ''
     select @cols = coalesce(@cols+N',', N'') + quotename(c.name) from syscolumns c
     inner join sysobjects o on c.id = o.id and o.xtype = 'u'
     left join @composite pk on o.name = pk.name
     where o.name = @currentTable and c.name != 'SEQN' and (pk.name is NULL or c.name != pk.col)

     SET @cols1 = ''
     select @cols1 = coalesce(@cols1+N',', N'') +
     CASE
     WHEN pk.name IS NULL THEN 'isnull(cast(' + quotename(c.name) + ' as nvarchar(256)), ''.'') as ' + quotename(c.name)
     ELSE quotename(c.name) + '= CASE WHEN ' + quotename(pk.col) + ' IS NULL THEN isnull(cast(' + quotename(c.name) + ' as nvarchar(256)), ''.'') ELSE cast(' + quotename(pk.col) + ' as nvarchar(256)) + ''_'' +  isnull(cast(' + quotename(c.name) + ' as nvarchar(256)), ''.'') END'
     END
     from syscolumns c
     inner join sysobjects o on c.id = o.id and o.xtype = 'u'
     left join @composite pk on o.name = pk.name
     where o.name = @currentTable and c.name != 'SEQN' and (pk.name is NULL or c.name != pk.col)

     declare @query nvarchar(max)


     select @query = N'
     with result as
     (
     select distinct SEQN, table_name, Col as column_name,  val as value,
     Col + ''_''+ val as source_value
     from
     (
     select SEQN, ''' + @currentTable +''' table_name ' + @cols1 + '
     from ' + @currentTable + '
     JOIN _chunks ch ON ch.ChunkId = {0} AND SEQN = ch.PERSON_ID
     ) as cp
     unpivot
     (
     Val for Col in (' + RIGHT(@cols, LEN(@cols) - 1) + ')
     ) as up
     )
     , result1 as
     (
     select SEQN, column_name, source_value, case when value = ''.'' then null else value end as value, table_name
     from result
     )
     , result2 as
     (
     select a.SEQN, a.column_name, a.source_value, a.value,
     case when  isnumeric(a.value)=1  and code.ValueDescription is NULL then cast(A.value as float)
     when  a.value like ''%[_]%'' then case when substring(A.value, charindex(''_'',A.value)+1, len(A.value)) = ''.'' then null else cast(substring(A.value, charindex(''_'',A.value)+1, len(A.value))as float) end
     else NULL
     end as value_as_number,
     case when a.value is not null  and A.value not like ''%[_]%'' and code.ValueDescription is not NULL then A.value + ''_''+ltrim(code.valueDescription) when a.value is null or a.value='''' then ''Missing''
     when (a.value is not null or a.value !='''') and a.value not like ''%[_]%'' and code.ValueDescription is NULL then  ''Range of values''
     when a.value like ''%[_]%''  then a.value
     else NULL
     end as value_as_string,
     case when a.value is not null  and A.value not like ''%[_]%'' and code.ValueDescription is not NULL then 900000004
     when a.value is null or a.value='''' then 900000005
     when (a.value is not null or a.value !='''') and a.value not like ''%[_]%'' and code.ValueDescription is NULL then  900000003
     when a.value like ''%[_]%''  then 900000002
     end as observation_type_concept_id,


     CAST(GETDATE() AS date) tempDate
     from result1 a
     left join NHANES.dbo.codebook code
     on (A.value not like ''%[_]%'' and (A.table_name=code.tableName and a.column_name=code.variableName and A.value=code.CodeOrValue))
     or (A.value like ''%[_]%'' and (A.table_name=code.tableName and a.column_name=code.variableName))
     )

     select distinct *,
     case when value_as_string like ''%[_]%'' then lower(substring(value_as_string, charindex(''_'',value_as_string)+1, len(value_as_string)))
     else lower(value_as_string) end map_key
     from result2
     '

     --select @cols1
     --select @query
     exec sp_executesql @query

     update @tables set processed = 1 where name = @currentTable
     end
   </Query>
  <ConditionOccurrence>
    <ConditionOccurrenceDefinition>
      <PersonId>SEQN</PersonId>
      <StartDate>tempDate</StartDate>
      <Concepts>
        <Concept>
          <ConceptIdMappers>
            <Mapper>
              <Lookup>NHANES\Lookups\Condition.sql</Lookup>
            </Mapper>
          </ConceptIdMappers>
          <Fields>
            <Field key="column_name" sourceKey="source_value" defaultTypeId="44787731"/>
          </Fields>
        </Concept>
      </Concepts>
    </ConditionOccurrenceDefinition>
  </ConditionOccurrence>
  <Observation>
    <ObservationDefinition>
      <PersonId>SEQN</PersonId>
      <StartDate>tempDate</StartDate>
      <ValuesAsString>
        <string>value_as_string</string>
      </ValuesAsString>
      <ValuesAsNumber>
        <string>value_as_number</string>
      </ValuesAsNumber>
      <Concepts>
        <Concept>
          <ConceptIdMappers>
            <Mapper>
              <Lookup>NHANES\Lookups\Observation.sql</Lookup>
            </Mapper>
          </ConceptIdMappers>
          <Fields>
            <Field key="column_name" defaultConceptId="-999" typeId="observation_type_concept_id" isNullable="true"/>
          </Fields>
        </Concept>
        <Concept>
          <ConceptIdMappers>
            <Mapper>
              <Lookup>NHANES\Lookups\ValueAsConceptId.sql</Lookup>
            </Mapper>
          </ConceptIdMappers>
          <Fields>
            <Field key="map_key"/>
          </Fields>
        </Concept>
      </Concepts>
    </ObservationDefinition>
  </Observation>
</QueryDefinition>
